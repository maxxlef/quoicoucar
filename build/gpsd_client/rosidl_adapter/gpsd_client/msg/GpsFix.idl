// generated from rosidl_adapter/resource/msg.idl.em
// with input from gpsd_client/msg/GpsFix.msg
// generated code does not contain a copyright notice

#include "std_msgs/msg/Header.idl"

module gpsd_client {
  module msg {
    module GpsFix_Constants {
      @verbatim (language="comment", text=
        "Measurement status" "\n"        "mode update not seen yet")
      const int16 MODE_NOT_SEEN = 0;
      @verbatim (language="comment", text=
        "none")
      const int16 MODE_NO_FIX = 1;
      @verbatim (language="comment", text=
        "good for latitude/longitude")
      const int16 MODE_2D = 2;
      @verbatim (language="comment", text=
        "good for altitude/climb too")
      const int16 MODE_3D = 3;
    };
    @verbatim (language="comment", text=
      "A more complete GPS fix to supplement sensor_msgs/NavSatFix.")
    struct GpsFix {
      std_msgs::msg::Header header;

      int16 mode;

      @verbatim (language="comment", text=
        "STATUS_NO_FIX   0       // no, or unknown" "\n"
        "- yes, plain GPS (SPS Mode), without DGPS, PPS, RTK, DR, etc." "\n"
        "STATUS_FIX      1" "\n"
        "STATUS_DGPS_FIX 2       /* yes, with DGPS */" "\n"
        "STATUS_RTK_FIX  3       /* yes, with RTK Fixed */" "\n"
        "STATUS_RTK_FLT  4       /* yes, with RTK Float */" "\n"
        "STATUS_DR       5       /* yes, with dead reckoning */" "\n"
        "STATUS_GNSSDR   6       /* yes, with GNSS + dead reckoning */" "\n"
        "STATUS_TIME     7       /* yes, time only (surveyed in, manual) */" "\n"
        "Note that STATUS_SIM and MODE_NO_FIX can go together." "\n"
        "STATUS_SIM      8       /* yes, simulated */" "\n"
        "- yes, Precise Positioning Service (PPS)" "\n"
        "- Not to be confused with Pulse per Second (PPS)" "\n"
        "- PPS is the encrypted military P(Y)-code" "\n"
        "STATUS_PPS_FIX  9")
      int16 status;

      @verbatim (language="comment", text=
        "Latitude (degrees). Positive is north of equator; negative is south.")
      double latitude;

      @verbatim (language="comment", text=
        "Longitude (degrees). Positive is east of prime meridian, negative west.")
      double longitude;

      @verbatim (language="comment", text=
        "Altitude (meters). Positive is above reference (e.g., sea level).")
      double altitude;

      @verbatim (language="comment", text=
        "Direction (degrees from north)")
      double track;

      @verbatim (language="comment", text=
        "Ground speed (meters/second)")
      double speed;

      @verbatim (language="comment", text=
        "GPS time")
      double time;

      @verbatim (language="comment", text=
        "Dilution of precision; Xdop<=0 means the value is unknown" "\n"
        "Total (positional-temporal) dilution of precision")
      double gdop;

      @verbatim (language="comment", text=
        "Positional (3D) dilution of precision")
      double pdop;

      @verbatim (language="comment", text=
        "Horizontal dilution of precision")
      double hdop;

      @verbatim (language="comment", text=
        "Vertical dilution of precision")
      double vdop;

      @verbatim (language="comment", text=
        "Temporal dilution of precision")
      double tdop;

      @verbatim (language="comment", text=
        "Uncertainty of measurement, 95% confidence" "\n"
        "Spherical position uncertainty (meters)")
      @unit (value="epe")
      double err;

      @verbatim (language="comment", text=
        "Horizontal position uncertainty (meters)")
      @unit (value="eph")
      double err_horz;

      @verbatim (language="comment", text=
        "Vertical position uncertainty (meters)")
      @unit (value="epv")
      double err_vert;

      @verbatim (language="comment", text=
        "Track uncertainty (degrees)")
      @unit (value="epd")
      double err_track;

      @verbatim (language="comment", text=
        "Ground speed uncertainty (meters/second)")
      @unit (value="eps")
      double err_speed;

      @verbatim (language="comment", text=
        "Temporal uncertainty")
      @unit (value="ept")
      double err_time;

      @verbatim (language="comment", text=
        "Number of satellites used in solution")
      int32 satellites_visible;
    };
  };
};
